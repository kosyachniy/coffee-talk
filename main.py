# TODO: –∑–∞–ø—Ä–æ—Å —É–∫–∞–∑–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞

# Libraries
## System
import json
import time
import asyncio

## External
import aiogram
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

## Local
from _func.mongodb import db


# Params
## Keys
with open('keys.json', 'r') as file:
	keys = json.loads(file.read())
	TOKEN = keys['tg']['token']

## Sets
with open('sets.json', 'r') as file:
	sets = json.loads(file.read())
	TIMEZONE = sets['timezone']
	DAYS_START = sets['notifications']['days_start']
	HOUR_START = sets['notifications']['hour_start']
	DAYS_STOP = sets['notifications']['days_stop']
	HOUR_STOP = sets['notifications']['hour_stop']
	DELAY = sets['delay']
	ADMINS = sets['admins']


# Global variables
bot = aiogram.Bot(token=TOKEN)
dp = Dispatcher(bot)


# Funcs
## Make keyboard
def keyboard(rows, inline=False):
	if rows == []:
		if inline:
			return aiogram.types.InlineKeyboardMarkup()
		else:
			return aiogram.types.ReplyKeyboardRemove()

	if rows in (None, [], [[]]):
		return rows

	if inline:
		buttons = aiogram.types.InlineKeyboardMarkup()
	else:
		buttons = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True)

	if type(rows[0]) not in (list, tuple):
		rows = [[button] for button in rows]

	for cols in rows:
		if inline:
			buttons.add(*[aiogram.types.InlineKeyboardButton(col['name'], **({'url': col['data']} if col['type'] == 'link' else {'callback_data': col['data']})) for col in cols])
			# buttons.add(*[aiogram.types.InlineKeyboardButton(col['name'], callback_data=col['data']) for col in cols])
		else:
			buttons.add(*[aiogram.types.KeyboardButton(col) for col in cols])

	return buttons

## Send message
async def send(user, text='', buttons=None, inline=False, image=None, preview=False):
	if not image:
		return await bot.send_message(
			user,
			text,
			reply_markup=keyboard(buttons, inline),
			parse_mode='Markdown',
			disable_web_page_preview=not preview,
		)

	else:
		return await bot.send_photo(
			user,
			image,
			text,
			reply_markup=keyboard(buttons, inline),
			parse_mode='Markdown',
		)

## Get current week day
def get_wday():
	return time.gmtime(time.time() + TIMEZONE * 3600).tm_wday

## Get current day
def get_day():
	return int((time.time() + TIMEZONE * 3600) // 86400)

## Get current hour
def get_hour():
	return time.gmtime(time.time() + TIMEZONE * 3600).tm_hour

## Auth
def auth(msg):
	user = db['users'].find_one({'id': msg.from_user.id}, {
		'_id': False,
		'id': True, # ! –ù—É–∂–Ω–æ —á—Ç–æ–±—ã –µ—Å–ª–∏ –±—ã–ª –ø—É—Å—Ç–æ–π –ª–æ–≥–∏–Ω, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª –Ω–æ–≤—ã–π –∞–∫–∫
		'login': True,
	})

	# Old user

	if user:
		login = msg.from_user.username if msg.from_user.username else ''
		if login and (('login' in user and user['login'] != login) or 'login' not in user):
			db['users'].update_one({'id': msg.from_user.id}, {'$set': {'login': login}})
			return True

		return 'login' in user

	# New user

	name = msg.from_user.first_name if msg.from_user.first_name else ''
	surname = msg.from_user.last_name if msg.from_user.last_name else ''
	login = msg.from_user.username if msg.from_user.username else ''

	user = {
		'id': msg.from_user.id,
		'name': name,
		'surname': surname,
	}

	if login:
		user['login'] = login

	db['users'].insert_one(user)

	return 'login' in user


# Telegram handlers
## Callback handlers
# {"id": "586534174085442072", "from": {"id": 136563129, "is_bot": false, "first_name": "Alexey", "last_name": "Poloz", "username": "kosyachniy", "language_code": "ru"}, "message": {"message_id": 41, "from": {"id": 1540757891, "is_bot": true, "first_name": "Coffee Talk", "username": "coffee_talk_bot"}, "chat": {"id": 136563129, "first_name": "Alexey", "last_name": "Poloz", "username": "kosyachniy", "type": "private"}, "date": 1611942216, "text": "–•–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏?", "reply_markup": {"inline_keyboard": [[{"text": "–î–∞", "callback_data": "y"}, {"text": "–ù–µ—Ç", "callback_data": "n"}]]}}, "chat_instance": "-2955349629926715065", "data": "y"}

### Yes
@dp.callback_query_handler(lambda call: call.data == 'y')
async def handler_yes(call):
	await bot.answer_callback_query(call.id)

	if call.message.text[:8] != '–ù–∞–ø–∞—Ä–Ω–∏–∫':
		try:
			await bot.delete_message(call.from_user.id, call.message.message_id)
		except Exception as e:
			print('ERROR `delete_message` in `handler_yes`', e)

	user = db['users'].find_one({
		'id': {'$ne': call.from_user.id},
		'waiting': {'$exists': True},
		'match': {'$ne': call.from_user.id},
	}, {'_id': False, 'id': True, 'login': True})

	if user:
		await send(
			call.from_user.id,
			'–ù–∞–ø–∞—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n–°–≤—è–∂–∏—Å—å —Å –Ω–∏–º: @{}'.format(user['login']),
			[[
				{'name': '–ù—É–∂–µ–Ω –µ—â—ë –æ–¥–∏–Ω –Ω–∞–ø–∞—Ä–Ω–∏–∫?', 'type': 'callback', 'data': 'y'},
			]],
			True,
		)
		db['users'].update_one({'id': call.from_user.id}, {
			'$push': {'match': user['id']},
			'$unset': {'waiting': ''},
		})

		await send(
			user['id'],
			'–ù–∞–ø–∞—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n–°–≤—è–∂–∏—Å—å —Å –Ω–∏–º: @{}'.format(call.from_user.username),
			[[
				{'name': '–ù—É–∂–µ–Ω –µ—â—ë –æ–¥–∏–Ω –Ω–∞–ø–∞—Ä–Ω–∏–∫?', 'type': 'callback', 'data': 'y'},
			]],
			True,
		)
		db['users'].update_one({'id': user['id']}, {
			'$push': {'match': call.from_user.id},
			'$unset': {'waiting': ''},
		})

		# Save match

		db['match'].insert_one({
			'user1': user['id'],
			'user2': call.from_user.id,
			'time': time.time(),
		})

	else:
		await send(
			call.from_user.id,
			'–í—ã –±—É–¥–µ—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏–º—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º!',
			[[
				{'name': '–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª üòï', 'type': 'callback', 'data': 'n'},
			]],
			True,
		)

		db['users'].update_one({'id': call.from_user.id}, {'$set': {'waiting': True}})

### No
@dp.callback_query_handler(lambda call: call.data == 'n')
async def handler_no(call):
	await bot.answer_callback_query(call.id)

	try:
		await bot.delete_message(call.from_user.id, call.message.message_id)
	except Exception as e:
		print('ERROR `delete_message` in `handler_no`', e)

	await send(
		call.from_user.id,
		'–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è ;)',
		[[
			{'name': '–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª!', 'type': 'callback', 'data': 'y'},
		]],
		True,
	)

	user = db['users'].find_one({'id': call.from_user.id, 'waiting': {'$exists': True}}, {'_id': True})
	if user:
		db['users'].update_one({'id': call.from_user.id}, {'$unset': {'waiting': ''}})

### No
@dp.callback_query_handler(lambda call: call.data[0] == 'r')
async def handler_rating(call):
	await bot.answer_callback_query(call.id)
	await send(call.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\n–ï—Å–ª–∏ —É –í–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –∑–∞–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ —ç—Ç–æ—Ç —á–∞—Ç.')

	try:
		await bot.delete_message(call.from_user.id, call.message.message_id)
	except Exception as e:
		print('ERROR `delete_message` in `handler_rating`', e)

	# Save rating

	db['rating'].insert_one({
		'user': call.from_user.id,
		'score': int(call.data[1]),
		'time': time.time(),
	})

### Check login
@dp.callback_query_handler(lambda call: call.data[0] == 'u')
async def handler_updated(call):
	await bot.answer_callback_query(call.id)

	if not auth(call):
		await send(
			call.from_user.id,
			'–ù–∏–∫–Ω–µ–π–º Telegram –Ω–µ —É–∫–∞–∑–∞–Ω! –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
			[{'name': '–£–∫–∞–∑–∞–ª', 'type': 'callback', 'data': 'u'}],
			True,
		)
		return

	await send(
		call.from_user.id,
		'–û—Ç–ª–∏—á–Ω–æ! –•–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏?',
		[[
			{'name': '–î–∞', 'type': 'callback', 'data': 'y'},
			{'name': '–ù–µ—Ç', 'type': 'callback', 'data': 'n'},
		]],
		True,
	)

## Entry point
@dp.message_handler(commands=['start', 'help'])
async def handler_start(msg: aiogram.types.Message):
	await send(
		msg.from_user.id,
		'–£—Ä–∞! üéó\n\n–¢–µ–ø–µ—Ä—å —Ç—ã —Å –Ω–∞–º–∏!\n–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n1) –î–≤–∞ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ö–æ—á–µ—à—å –ª–∏ —Ç—ã –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–µ–º-—Ç–æ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è. –ï—Å–ª–∏ –¥–∞, —Ç–æ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–∞—Ä—É —Å—Ä–∞–∑—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –Ω–∞–π–¥—ë—Ç—Å—è:)\n–ù–∞–ø–∏—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—É –≤ Telegram, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –∑–≤–æ–Ω–∫–µ –∏ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è.\n\n2)–Ø —Å–æ–±–∏—Ä–∞—é –ø–∞—Ä—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: —á–µ–º –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–≤–µ—Ç –±–æ—Ç—É - —Ç–µ–º –∞–∫—Ç–∏–≤–Ω–µ–µ –¥–∞—ë—Ç—Å—è –ø–∞—Ä—Ç–Ω—ë—Ä.\n\n3) –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—Ç—É —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 3-4 –¥–Ω—è, –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ù—É–∂–µ–Ω –µ—â—ë –æ–¥–∏–Ω –Ω–∞–ø–∞—Ä–Ω–∏–∫?¬ª\n\n4)–ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É ¬´–ù—É–∂–µ–Ω –µ—â—ë –æ–¥–∏–Ω –Ω–∞–ø–∞—Ä–Ω–∏–∫?¬ª –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –Ω–æ–≤–æ–≥–æ\n\n–ü–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç! üåä',
		['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'] if msg.from_user.id in ADMINS else None,
	)

	if not auth(msg):
		await send(
			msg.from_user.id,
			'–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º –≤ Telegram, —á—Ç–æ–±—ã –Ω–∞–ø–∞—Ä–Ω–∏–∫ —Å–º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏!',
			[{'name': '–£–∫–∞–∑–∞–ª', 'type': 'callback', 'data': 'u'}],
			True,
		)
		return

	await send(
		msg.from_user.id,
		'–•–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏?',
		[[
			{'name': '–î–∞', 'type': 'callback', 'data': 'y'},
			{'name': '–ù–µ—Ç', 'type': 'callback', 'data': 'n'},
		]],
		True,
	)

## Buttons
@dp.message_handler(lambda msg: msg.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def handler_text(msg: aiogram.types.Message):
	if msg.from_user.id not in ADMINS:
		await send(msg.from_user.id, '–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')
		return

	rating_all = [i['score'] for i in db['rating'].find({}, {'_id': False, 'score': True})]
	rating_all = round(sum(rating_all) / len(rating_all), 2) if len(rating_all) else 0

	rating_month = [i['score'] for i in db['rating'].find({'time': {'$gte': time.time() - 2592000}}, {'_id': False, 'score': True})]
	rating_month = round(sum(rating_month) / len(rating_month), 2) if len(rating_month) else 0

	match_all = db['match'].find({}, {'_id': False, 'score': True}).count()
	match_month = db['match'].find({'time': {'$gte': time.time() - 2592000}}, {'_id': False, 'score': True}).count()

	await send(
		msg.from_user.id,
		'–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {} ({} –∑–∞ –º–µ—Å—è—Ü)\n–í—Å–µ–≥–æ –º–µ—Ç—á–µ–π: {} ({} –∑–∞ –º–µ—Å—è—Ü)'.format(
			rating_all, rating_month, match_all, match_month,
		),
		['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'] if msg.from_user.id in ADMINS else None,
	)

## Main handler
@dp.message_handler()
async def handler_text(msg: aiogram.types.Message):
	if not auth(msg):
		await send(
			msg.from_user.id,
			'–ù–∏–∫–Ω–µ–π–º Telegram –Ω–µ —É–∫–∞–∑–∞–Ω! –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
			[{'name': '–£–∫–∞–∑–∞–ª', 'type': 'callback', 'data': 'u'}],
			True,
		)
		return

	await send(msg.from_user.id, '–í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!')

	# Save feedback

	db['feedback'].insert_one({
		'user': msg.from_user.id,
		'text': msg.text,
		'time': time.time(),
	})

	for admin in ADMINS:
		await send(admin, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{}\n\n{}'.format(msg.from_user.username, msg.text))

# Background process
async def background_process():
	notify_start = db['system'].find_one({'name': 'notify_start'}, {'_id': False, 'cont': True})['cont']
	notify_stop = db['system'].find_one({'name': 'notify_stop'}, {'_id': False, 'cont': True})['cont']

	if get_wday() in DAYS_START and get_day() != notify_start and get_hour() >= HOUR_START:
		for user in db['users'].find({'login': {'$exists': True}}, {'_id': False, 'id': True}):
			await send(
				user['id'],
				'–•–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏?',
				[[
					{'name': '–î–∞', 'type': 'callback', 'data': 'y'},
					{'name': '–ù–µ—Ç', 'type': 'callback', 'data': 'n'},
				]],
				True,
			)

		db['system'].update_one({'name': 'notify_start'}, {'$set': {'cont': get_day()}})

	if get_wday() in DAYS_STOP and get_hour() >= HOUR_STOP and get_day() != notify_stop and notify_start:
		for user in db['users'].find({'match': {'$exists': True}}, {'_id': False, 'id': True}):
			await send(
				user['id'],
				'–ö–∞–∫ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏?',
				[[
					{'name': '‚òÖ', 'type': 'callback', 'data': 'r1'},
					{'name': '‚òÖ‚òÖ', 'type': 'callback', 'data': 'r2'},
					{'name': '‚òÖ‚òÖ‚òÖ', 'type': 'callback', 'data': 'r3'},
					{'name': '‚òÖ‚òÖ‚òÖ‚òÖ', 'type': 'callback', 'data': 'r4'},
					{'name': '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ', 'type': 'callback', 'data': 'r5'},
				]],
				True,
			)

			db['users'].update_one({'id': user['id']}, {'$unset': {'match': ''}})

		db['system'].update_one({'name': 'notify_stop'}, {'$set': {'cont': get_day()}})


if __name__ == '__main__':
	# First setup
	notify_start = db['system'].find_one({'name': 'notify_start'}, {'_id': True})
	if not notify_start:
		db['system'].insert_one({
			'name': 'notify_start',
			'cont': 0,
		})

	notify_stop = db['system'].find_one({'name': 'notify_stop'}, {'_id': True})
	if not notify_stop:
		db['system'].insert_one({
			'name': 'notify_stop',
			'cont': 0,
		})

	# Background process
	def repeat(coro, loop):
		asyncio.ensure_future(coro(), loop=loop)
		loop.call_later(DELAY, repeat, coro, loop)

	loop = asyncio.get_event_loop()
	loop.call_later(0, repeat, background_process, loop)

	# Telegram process
	executor.start_polling(dp, skip_updates=True, loop=loop)